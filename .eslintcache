[{"/home/ktoombs/code/uglylikeme/src/engine/Engine.ts":"1","/home/ktoombs/code/uglylikeme/src/reportWebVitals.ts":"2","/home/ktoombs/code/uglylikeme/src/UI/Game.tsx":"3","/home/ktoombs/code/uglylikeme/src/engine/externalfns/util.ts":"4","/home/ktoombs/code/uglylikeme/src/UI/DisplayNumber.tsx":"5","/home/ktoombs/code/uglylikeme/src/UI/ListedResourceClass.tsx":"6","/home/ktoombs/code/uglylikeme/src/UI/ResearchUI.tsx":"7","/home/ktoombs/code/uglylikeme/src/engine/Datamap.ts":"8","/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/SingleResource.ts":"9","/home/ktoombs/code/uglylikeme/src/App.tsx":"10","/home/ktoombs/code/uglylikeme/src/engine/Research.ts":"11","/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/SingleBuilding.ts":"12","/home/ktoombs/code/uglylikeme/src/UI/BuildingsUI.tsx":"13","/home/ktoombs/code/uglylikeme/src/engine/CoreEngine.ts":"14","/home/ktoombs/code/uglylikeme/src/engine/garden/Garden.ts":"15","/home/ktoombs/code/uglylikeme/src/index.tsx":"16","/home/ktoombs/code/uglylikeme/src/UI/DisplayDecimal.tsx":"17","/home/ktoombs/code/uglylikeme/src/UI/comps/BasicCommand.tsx":"18","/home/ktoombs/code/uglylikeme/src/engine/externalfns/ad-notations.esm.js":"19","/home/ktoombs/code/uglylikeme/src/UI/GardenRow.tsx":"20","/home/ktoombs/code/uglylikeme/src/UI/OptionsRow.tsx":"21","/home/ktoombs/code/uglylikeme/src/engine/DoomResearches.ts":"22","/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/ExpoCurve.ts":"23"},{"size":11849,"mtime":1607462640138,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":1606772022772,"results":"26","hashOfConfig":"25"},{"size":5076,"mtime":1607461273960,"results":"27","hashOfConfig":"25"},{"size":1082,"mtime":1606782186774,"results":"28","hashOfConfig":"25"},{"size":414,"mtime":1607438448868,"results":"29","hashOfConfig":"25"},{"size":1286,"mtime":1606781548176,"results":"30","hashOfConfig":"25"},{"size":3535,"mtime":1607371459301,"results":"31","hashOfConfig":"25"},{"size":2144,"mtime":1607462758051,"results":"32","hashOfConfig":"25"},{"size":1475,"mtime":1607367145400,"results":"33","hashOfConfig":"25"},{"size":735,"mtime":1607445244931,"results":"34","hashOfConfig":"25"},{"size":2298,"mtime":1607367430824,"results":"35","hashOfConfig":"25"},{"size":3619,"mtime":1607462676335,"results":"36","hashOfConfig":"25"},{"size":4327,"mtime":1607425064908,"results":"37","hashOfConfig":"25"},{"size":4603,"mtime":1607103860318,"results":"38","hashOfConfig":"25"},{"size":15934,"mtime":1607455215977,"results":"39","hashOfConfig":"25"},{"size":593,"mtime":1606780734709,"results":"40","hashOfConfig":"25"},{"size":402,"mtime":1607431189061,"results":"41","hashOfConfig":"25"},{"size":846,"mtime":1606787990625,"results":"42","hashOfConfig":"25"},{"size":44942,"mtime":1607430998407,"results":"43","hashOfConfig":"25"},{"size":7624,"mtime":1607442729338,"results":"44","hashOfConfig":"25"},{"size":730,"mtime":1607445253644,"results":"45","hashOfConfig":"25"},{"size":1080,"mtime":1607462454918,"results":"46","hashOfConfig":"25"},{"size":1726,"mtime":1606779212389,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"11ajumv",{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"56"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"67"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"56"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"56"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"56"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":44,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"56"},"/home/ktoombs/code/uglylikeme/src/engine/Engine.ts",["106","107","108"],"/home/ktoombs/code/uglylikeme/src/reportWebVitals.ts",[],["109","110"],"/home/ktoombs/code/uglylikeme/src/UI/Game.tsx",["111"],"import Decimal from 'break_infinity.js';\nimport React from 'react';\nimport { gEngine } from '..';\nimport { Datamap } from '../engine/Datamap';\nimport { canCheat, MINUTE_MS, percentOf } from '../engine/externalfns/util';\nimport { SingleBuildingUI } from './BuildingsUI';\nimport { BasicCommandButton } from './comps/BasicCommand';\nimport DisplayDecimal from './DisplayDecimal';\nimport GardenRow from './GardenRow';\nimport ListedResourceClass from './ListedResourceClass';\nimport OptionsRow from './OptionsRow';\nimport ResearchUI from './ResearchUI';\n\nexport default class Game extends React.Component<{ data: Datamap }, {}> {\n\n\n  render() {\n    const data = this.props.data\n\n    return (\n      <div>\n        //TODO: name game\n        <hr />\n        {data.unlocksStates.two > 0 && <React.Fragment>\n          <NavRow data={data} />\n          <hr />\n        </React.Fragment>}\n        {data.nav === 0 && <EnergyRow data={data} energy={data.cell.a} />}\n        {data.nav === 1 && <DoomRow data={data} />}\n        {data.nav === 3 && <GardenRow data={data} />}\n        {data.nav === 2 && <StatsRow data={data} />}\n        {data.nav === 4 && <OptionsRow data={data} />}\n        <hr />\n        <FileButtons auto={data.autosave} last={data.last} />\n      </div>\n    );\n  }\n}\n\nconst FileButtons = (props: { last: number, auto: boolean }) => {\n  return (\n    <div>\n      File:\n      <button onClick={gEngine.save}>\n        Save\n          </button>\n      <button onClick={gEngine.autosaveToggle}>\n        Auto ({props.auto.toString()})\n          </button>\n      <button onClick={gEngine.load}>\n        Load\n          </button>\n      <button onClick={gEngine.reset}>\n        Reset\n          </button>\n      {canCheat && <button onClick={() => gEngine.processDelta(MINUTE_MS * 10)}>\n        cheat</button>}\n    </div>\n  )\n}\n\nconst EnergyRow = (props: { data: Datamap, energy: Decimal }) => {\n  const data = props.data;\n  const goal = gEngine.energy.unlockGoal();\n  const reached = gEngine.energy.canGiveUp();\n  const clickGain = gEngine.energyModule.energyPerClick();\n  const activityGain = gEngine.energyModule.energyGainFromActivity();\n  const prize = gEngine.doomGain();\n\n\n  return (\n    <div style={{ position: 'relative' }}>\n      <ListedResourceClass resource={gEngine.energyResource} />\n      {data.unlocksStates.two > 1 && <ListedResourceClass resource={gEngine.antiEnergyResource} />}\n      {data.cell.doom.greaterThan(0) && <ListedResourceClass resource={gEngine.doom} />}\n      Click Energy Gain: <DisplayDecimal decimal={clickGain} />, Hover Energy Gain: <DisplayDecimal decimal={activityGain} />\n      <br />\n      <button onClick={gEngine.energy.gatherEnergy} onSubmit={(ev) => { ev.preventDefault() }}>\n        Gather Energy\n      </button>\n      <button onMouseEnter={() => gEngine.setActivity(1)} onMouseLeave={gEngine.clearActivity}>\n        Gather Energy /s\n      </button>\n      <SingleBuildingUI building={gEngine.effort} />\n      <SingleBuildingUI building={gEngine.drive} />\n      <SingleBuildingUI building={gEngine.antiDrive} />\n      <SingleBuildingUI building={gEngine.determination} />\n      <br />\n      <span>\n        Goal: <DisplayDecimal decimal={goal} /> Energy,  </span>\n      <span>Progress: {percentOf(data.cell.a.toNumber(), goal.toNumber())} | {data.unlocksStates.one}, </span>\n      {data.unlocksStates.one >= 3 && <span>\n        Consolation Prize: <DisplayDecimal decimal={prize} /> Doom\n      </span>}\n      <br />\n      <button disabled={!reached} onClick={gEngine.energy.giveUp}>\n        Give Up\n      </button>\n      <BasicCommandButton cmd={gEngine.gUL2} />\n    </div>\n  )\n}\n\nconst DoomRow = (props: { data: Datamap }) => {\n  const data = props.data;\n  const engine = gEngine;\n\n\n  return (\n    <div>\n      Doom Stuff<br />\n      <ListedResourceClass resource={engine.doom} />\n      {data.unlocksStates.two > 1 && <ListedResourceClass resource={gEngine.antiEnergyResource} />}\n      <SingleBuildingUI building={engine.doomUpgrade1} />\n      <SingleBuildingUI building={engine.doomUpgrade2} />\n      <SingleBuildingUI building={engine.doomUpgrade3} />\n      <ResearchUI research={engine.research} />\n    </div>\n  )\n}\n\nconst NavRow = (props: { data: Datamap }) => {\n  const data = props.data;\n  const engine = gEngine;\n  return (\n    <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n      <div>\n        {true && <button onClick={() => engine.setNav(0)}>Energy</button>}\n        {data.unlocksStates.two > 0 && <button onClick={() => engine.setNav(1)}>Doom</button>}\n        {data.unlocksStates.one >= 5 && <button onClick={() => engine.setNav(3)}>Garden</button>}\n      </div>\n      <div>\n        {data.cell.swimmerNumber.greaterThan(10) && <button onClick={() => engine.setNav(2)}>Stats</button>}\n        <button onClick={() => engine.setNav(4)} style={{ right: 0 }}>Options / Info</button>\n      </div>\n    </div>\n  )\n}\n\n\nconst StatsRow = (props: { data: Datamap }) => {\n  const data = props.data;\n  return (\n    <div>\n      Stats<br />\n      You are attempt #<DisplayDecimal decimal={data.cell.swimmerNumber} />\n    </div>\n  )\n}\n\n",["112","113"],"/home/ktoombs/code/uglylikeme/src/engine/externalfns/util.ts",[],"/home/ktoombs/code/uglylikeme/src/UI/DisplayNumber.tsx",["114"],"import Decimal from \"break_infinity.js\"\nimport React from \"react\"\nimport { formatNumber } from \"../engine/externalfns/util\";\n\n\nconst DisplayNumber: React.FC<{num: number, name? :string}> = (props) => (\n    <span style={{display:\"flex\",flexDirection:'row'}}>\n        {props.name && <span style={{flexBasis:'200px'}}>{props.name}</span>}\n        {formatNumber(props.num)}\n    </span>\n)\n\nexport default DisplayNumber;","/home/ktoombs/code/uglylikeme/src/UI/ListedResourceClass.tsx",[],"/home/ktoombs/code/uglylikeme/src/UI/ResearchUI.tsx",["115","116","117","118"],"import React from \"react\";\nimport Research, { SingleResearch } from \"../engine/Research\";\nimport { BuildingTip } from \"./BuildingsUI\";\nimport DisplayDecimal from \"./DisplayDecimal\";\n\ninterface CompProps {research: Research}\ninterface CompState {subnav: number}\nexport default class ResearchUI extends React.Component<CompProps, CompState> {\n\n    constructor(props:any){\n        super(props)\n        this.state = {\n            subnav: 0,\n        }\n    }\n\n    setFn = (num:number) => {\n        this.setState({subnav:num})\n    }\n    \n    render () {\n        const research = this.props.research;\n        return ( <div>\n\n            Doom Research\n            <div className='NavRow flexrow'>\n                <ResearchNavButton navKey={NavKeys.Available} active={this.state.subnav} setFn={this.setFn} />\n                <ResearchNavButton navKey={NavKeys.Completed} active={this.state.subnav} setFn={this.setFn} />\n            </div>\n            <div className='flexrow gap wrap'>\n            </div>\n\n                </div>)\n\n    }\n\n}\n\nexport class SingleResearchUI extends React.Component<{research: SingleResearch, active: number}, {open: boolean}> {\n\n    constructor(props:any){\n        super(props)\n        this.state = {\n            open: false\n        }\n    }\n\n    over = () => {\n        //console.log('over');\n        \n        this.setState({open:true})\n    }\n\n    getTip () {\n\n        const research = this.props.research;\n        \n        return (<div>\n                {research.info.name}\n                <hr/>\n                {research.getCosts().map((cost_and_name)=>{\n                    return (\n                    <span key={`tooltip${cost_and_name.name}cost`} className={cost_and_name.can?'CostAble':'CostUnable'}>\n                {cost_and_name.name} : <DisplayDecimal decimal={cost_and_name.cost} /><br/>\n                    </span>)\n                })}\n                <hr/>\n                {research.info.description}\n            </div>)\n\n    }\n\n    leave = () => {\n        //console.log('out');\n        \n        this.setState({open:false})\n    }\n\n\n    render () {\n        \n        const research = this.props.research;\n        if (research.info.hidden() && this.props.active === 0) return null;\n        const have = research.info.get();\n        if (have && this.props.active === 0) return null;\n        const tipDiv = this.state.open;\n\n        const stylelist = ['disabled-button', 'active-button', 'capped-button'];\n        const style = stylelist[research.canBuy()];\n       \n    return (\n        <span onMouseOver={this.over} onMouseOut={this.leave} style={{position:'relative', overflow: 'visible'}} >\n            {tipDiv && <BuildingTip show={tipDiv} tip={this.getTip()}/>}\n       {(!have && this.props.active === 0) && <button className={style} disabled={style != 'active-button'} onClick={()=>{research.buy(); this.leave()}}>\n    {research.info.name}\n        </button>}\n        {(have && this.props.active === 1 ) && <span className='researched' >\n    {research.info.name}\n        </span>}\n        </span>\n        )\n\n    }\n}\n\nenum NavKeys {\n    'Available','Completed'\n}\n\nclass ResearchNavButton extends React.Component<{navKey: number, setFn: (num:number)=>void, active: number}, {}> {\n\n    \n    render () {        \n        const key = this.props.navKey\n        const str = NavKeys[key]\n\n        const style = (key === this.props.active)?'ActiveNavButton':'NavButton';\n\n        return (<button className={style} onClick={()=>{this.props.setFn(key)}}>\n            {str.toUpperCase()}\n        </button>)\n\n    }\n\n}",["119","120"],"/home/ktoombs/code/uglylikeme/src/engine/Datamap.ts",[],"/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/SingleResource.ts",[],["121","122"],"/home/ktoombs/code/uglylikeme/src/App.tsx",[],"/home/ktoombs/code/uglylikeme/src/engine/Research.ts",["123","124","125"],"import Decimal, { DecimalSource } from \"break_infinity.js\";\nimport { gEngine } from \"..\";\nimport Engine from \"./Engine\";\nimport { SingleResource } from \"./externalfns/decimalInterfaces/SingleResource\";\n\nexport default class Research {\n\n    constructor(public engine: Engine){\n\n    }\n    /*\n    olivine: SingleResearch = new SingleResearch({\n        name: \"Planetary Olivine (Mg2+, Fe2+)2SiO\",\n        description: \"Gives your planetary reactions access to magnesium, iron, and silicon.\",\n        makeTrue: ()=>{this.engine.datamap.bools.olivine = true},\n        get: ()=>this.engine.datamap.bools.olivine,\n        costs: [\n            {count: new Decimal(10), resource: this.engine.resources.luck},\n            {count: new Decimal(0.1), resource: this.engine.resources.oxygen},\n        ],\n        hidden: ()=>this.engine.datamap.cell.hillsNShit.eq(0) \n    })*/\n    \n\n}\n\nexport class SingleResearch {\n\n    constructor(public info: ResearchInfo){\n\n    }\n\n    getCosts () {\n        return this.info.costs.map((cost, index) => {\n            const costDecimal = this.getCost(index);\n\n            return {cost:costDecimal, name: cost.resource.info.name, can: cost.resource.count.greaterThanOrEqualTo(costDecimal),\n            capped: cost.resource.cap.lessThan(costDecimal) };\n        });\n    }\n\n    getCost (index: number) {\n        return this.info.costs[index].count\n    }\n\n\n    //return 0 = no\n    //return 1 = yes\n    //return 2 = capped\n    canBuy = () => {\n        let can:number = 1;\n        let costs = this.getCosts();\n        costs.forEach((cost)=>{\n            if (can != 2) {\n                if (can != 0) {\n                    if (!cost.can) can = 0;\n                }\n                if (cost.capped) can =2\n            }\n\n        })\n        return can;\n\n    }\n\n    buy = () => {\n        if (this.canBuy() !== 1) return;\n\n        this.info.costs.forEach((cost, index) => {\n                let resource_cost = this.getCost(index);                \n                cost.resource.loseResource(resource_cost)\n        });\n\n        this.info.makeTrue()\n        gEngine.notify();\n    }\n\n    \n\n}\n\ninterface ResearchInfo {\n    get: ()=>boolean,\n    makeTrue: VoidFunction,\n    name: string,\n    description: string,\n    costs: {count: Decimal, resource: SingleResource}[],\n    hidden: ()=>boolean,\n}","/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/SingleBuilding.ts",["126","127"],"import Decimal, { DecimalSource } from \"break_infinity.js\";\nimport DisplayDecimal from \"../../../UI/DisplayDecimal\";\nimport ExpoCurve, { expoI_getCost } from \"./ExpoCurve\";\nimport { SingleResource } from \"./SingleResource\";\n\nexport class SingleBuilding {\n\n    constructor(public info: BuildingInfo) {\n\n    }\n\n    gainBuilding = (amount: DecimalSource) => {\n        this.info.building.gainResource(amount)\n    }\n\n    get count() {\n        return this.info.building.info.get();\n    }\n\n    getCosts() {\n        return this.info.costs.map((cost, index) => {\n            const costDecimal = this.getCost(index);\n\n            return {\n                cost: costDecimal, name: cost.resource.info.name, can: cost.resource.count.greaterThanOrEqualTo(costDecimal),\n                capped: cost.resource.cap.lessThan(costDecimal)\n            };\n        });\n    }\n\n    getCost(index: number) {\n        return expoI_getCost(this.info.costs[index].expo, this.count)\n    }\n\n    display() {\n        return DisplayDecimal({ decimal: this.count })\n    }\n\n    activeUP = () => {\n        if (this.info.active) {\n            let newActive = Decimal.min(this.count, this.info.active.count.add(1))\n            this.info.active.info.setDecimal(newActive)\n        }\n    }\n\n    activeDOWN = () => {\n        if (this.info.active) {\n            let newActive = Decimal.max(0, this.info.active.count.minus(1))\n            this.info.active.info.setDecimal(newActive)\n        }\n    }\n\n    activeABLED = () => {\n        if (this.info.active) {\n            return this.info.active.count\n        }\n    }\n\n    activeDISABLED = () => {\n        if (this.info.active) {\n            return this.count.minus(this.activeABLED() as Decimal)\n        }\n    }\n\n    reset = () => {\n        this.info.building.info.setDecimal(new Decimal(0));\n    }\n\n    //return 0 = no\n    //return 1 = yes\n    //return 2 = capped\n    canBuy = () => {\n        let can: number = 1;\n        let costs = this.getCosts();\n        costs.forEach((cost) => {\n            if (can != 2) {\n                if (can != 0) {\n                    if (!cost.can) can = 0;\n                }\n                if (cost.capped) can = 2\n            }\n\n        })\n        return can;\n        /*\n        if (this.info.building.cap.lessThanOrEqualTo(this.count)) return false;\n        this.info.costs.forEach((cost, index) => {\n            if (can) {\n                let resource_cost = this.getCost(index);\n                if (resource_cost.greaterThan(cost.resource.count)) can = false;\n            }\n        });\n        return can;*/\n    }\n\n    buy = () => {\n        if (this.canBuy() !== 1) return;\n\n        this.info.costs.forEach((cost, index) => {\n            let resource_cost = this.getCost(index);\n            //console.log(cost.expo, this.count.toNumber(), resource_cost.toNumber());\n\n            cost.resource.loseResource(resource_cost)\n        });\n\n        this.gainBuilding(1)\n\n    }\n\n    buyMaxMaybe = () => {\n        while (this.canBuy() === 1) {\n   \n            this.info.costs.forEach((cost, index) => {\n                let resource_cost = this.getCost(index);\n                //console.log(cost.expo, this.count.toNumber(), resource_cost.toNumber());\n                \n                cost.resource.loseResource(resource_cost)\n            });\n            \n            this.gainBuilding(1)\n        }\n    }\n}\n\n\ninterface BuildingInfo {\n    building: SingleResource,\n    costs: BuildingCostInfo[],\n    description: string,\n    active?: SingleResource,\n    outcome: () => string,\n    hidden: () => boolean,\n}\n\ninterface BuildingCostInfo {\n    expo: ExpoCurve,\n    resource: SingleResource,\n}\n","/home/ktoombs/code/uglylikeme/src/UI/BuildingsUI.tsx",["128"],"import React, { CSSProperties, ReactNode } from \"react\";\nimport { gEngine } from \"..\";\nimport { SingleBuilding } from \"../engine/externalfns/decimalInterfaces/SingleBuilding\";\nimport DisplayDecimal from \"./DisplayDecimal\";\n\ninterface CompProps {}\ninterface CompState {}\nexport default class BuildingsUI extends React.Component<CompProps, CompState> {\n    \n    render () {\n        return ( <div>\n   \n                </div>)\n\n    }\n\n}\n\nexport class SingleBuildingUI extends React.Component<{building: SingleBuilding}, {open: boolean}> {\n\n    constructor(props:any){\n        super(props)\n        this.state = {\n            open: false\n        }\n    }\n    /*\n    componentDidMount =()=> {\n        let ref: React.RefObject<SingleBuildingUI> = React.createRef()\n        ReactDOM.findDOMNode(ref.current)?.addEventListener('mouseover',this.over)\n        ReactDOM.findDOMNode(ref.current)?.addEventListener('mouseleave',this.leave)\n    }\n\n    componentWillUnmount=()=> {\n        let ref: React.RefObject<SingleBuildingUI> = React.createRef()\n        ReactDOM.findDOMNode(ref.current)?.removeEventListener('mouseover',this.over)\n        ReactDOM.findDOMNode(ref.current)?.removeEventListener('mouseleave',this.leave)    \n    }*/\n\n    over = () => {\n        //console.log('over');\n        \n        this.setState({open:true})\n    }\n\n    classNames = ['CostAble','CostUnable','CostCapped']\n\n    getTip () {\n\n        const building = this.props.building;\n        \n        return (<div>\n                {building.info.description}\n                <hr/>\n                {building.getCosts().map((cost_and_name,index)=>{\n                    let cn = 0;\n                    if (cost_and_name.can === false) cn = 1;\n                    if (cost_and_name.capped === true) cn = 2;\n                    return (\n                    <span key={`tooltip${cost_and_name.name}cost`} className={this.classNames[cn]}>\n                {cost_and_name.name} : <DisplayDecimal decimal={cost_and_name.cost} />\n                    <br/></span>)\n                })}\n                <hr/>\n                {building.info.outcome()}\n            </div>)\n\n    }\n\n    leave = () => {\n        //console.log('out');\n        \n        this.setState({open:false})\n    }\n\n    buy = (ev: React.MouseEvent) => {\n        if (ev.shiftKey) {\n            this.props.building.buyMaxMaybe();\n        } else this.props.building.buy();\n        gEngine.notify();\n    }\n\n\n    render () {\n        \n        const building = this.props.building;\n        if (building.info.hidden()) return null;\n        const tipDiv = this.state.open;\n\n        const stylelist2 = ['disabled-button', 'active-button', 'capped-button'];\n        const bcb = building.canBuy() //0 = no, 1= yes, 2 = capped\n        let style2 = stylelist2[bcb];\n        if (building.info.active) {\n            style2 += ' middle-button'\n        }\n\n        //const style = (building.canBuy())? CSSSTYLES.activeButton: CSSSTYLES.disabledButton;\n       \n    return (\n        <span onMouseOver={this.over} onMouseOut={this.leave} style={{position:'relative'}}>\n            {building.info.active && <button className={'base-button left-button red-text'} onClick={building.activeDOWN}>{building.activeDISABLED()?.toNumber()}</button>}\n            <BuildingTip tip={this.getTip()} show={tipDiv}/>\n       <button className={style2} onClick={this.buy} disabled={bcb !== 1}>\n    {building.info.building.info.name} <span className='comment-text'>({building.count.toNumber()})</span>\n        </button>\n\n            {building.info.active && <button className={'base-button right-button green-text'} onClick={building.activeUP}>{building.activeABLED()?.toNumber()}</button>}\n        </span>\n        )\n\n    }\n}\n\nexport const BuildingTip: React.FC<{ tip?: ReactNode, show: boolean}> = (props) => {\n    if (props.tip === undefined) return null\n    if (props.show === false) return null;\n    return (\n          <div className='BuildingTip' style={BTStyle}>\n              {props.tip} \n        </div>\n      )\n  \n  }\n\nconst BTStyle: React.CSSProperties = {\n    border: '2px solid black',\n    zIndex: 1,\n    backgroundColor: \"white\",\n    textAlign: 'center',\n    position: 'absolute',\n    whiteSpace: 'pre',\n    margin: '5px',\n    top: '10px',\n    padding: '5px',\n    pointerEvents: 'none',    \n    display: 'inline-block',\n    overflow: 'visible'\n\n}","/home/ktoombs/code/uglylikeme/src/engine/CoreEngine.ts",[],"/home/ktoombs/code/uglylikeme/src/engine/garden/Garden.ts",["129","130","131","132","133","134","135","136","137","138","139","140","141"],"import Decimal from \"break_infinity.js\";\nimport { timeStamp } from \"console\";\nimport { isUndefined } from \"lodash\";\nimport { Datamap } from \"../Datamap\";\nimport Engine from \"../Engine\";\nimport { SingleBuilding } from \"../externalfns/decimalInterfaces/SingleBuilding\";\nimport { SingleResource } from \"../externalfns/decimalInterfaces/SingleResource\";\nimport { getRandomInt, MINUTE_MS } from \"../externalfns/util\";\nimport { SingleResearch } from \"../Research\";\n\nexport default class Garden {\n\n    chosenSeed: number|undefined = undefined;\n    maxBagSlots: number = 0;\n    maxgGardenPlots: number = 0;\n    constructor(public engine: Engine) {\n        this.setTempData();\n    }\n\n    setTempData = () => {\n        this.maxBagSlots = this.calcBagSlots();\n        this.maxgGardenPlots = this.calcBagSlots();\n        this.setGardenSpeedMult();\n        this.setWaterTimeMulti();\n        this.setDoomFruitMult();\n        this.setSeedGainMulti();\n    }\n\n    calcBagSlots = () => {\n        return 1 + this.data.researches.expansion + this.data.researches.bagExpansion;\n    }\n\n    calcGardenPlots = () => {\n        return 1 + this.data.researches.expansion;\n    }\n\n    get data() {\n        return this.engine.datamap.garden;\n    }\n\n    plantSeed = (bagIndex: number) => {\n        const seed = this.data.bag[bagIndex];\n        if (isUndefined(seed)) {\n            return;\n        }\n\n        if (this.canPlantSeed()) {\n            this.data.plots.push(this.getPlant(seed))\n            this.data.bag.splice(bagIndex, 1);\n\n            if (this.data.researches.doomedSeeds) {\n                const rng = getRandomInt(1, 10);\n                if (rng === 10) {\n                    this.getSeedType(SeedType.doom)\n                }\n            }\n        }\n    }\n\n\n    canGetSeed = () => {\n        const t1= this.data.bag.length < this.maxBagSlots\n        const t2 = this.data.seeds.greaterThanOrEqualTo(1);\n        return t1 && t2\n    }\n\n    canPlantSeed = () => {\n        return this.data.plots.length < this.maxgGardenPlots\n    }\n\n    processDelta = (delta: number) => {\n        if (this.engine.datamap.cell.rebirth.greaterThan(0)) {\n            delta = delta * this.engine.datamap.cell.rebirth.add(1).toNumber();\n        }\n\n        this.data.seedTimer += delta;\n        if (this.data.seedTimer >= TimeRequiredForSeed) {\n            this.data.seeds = this.data.seeds.add(1);\n            this.data.seedTimer -= TimeRequiredForSeed\n            if (this.data.researches.progression === 0) {\n                this.data.researches.progression = 1\n            }\n        }\n        \n        delta = Math.floor(delta * this.gardenSpeedMult)\n        if (this.data.plots.length > 0) {\n            this.data.plots.forEach((plot, index) => {\n                plot.plantTimer += delta;\n                if (plot.water) {\n                    const extra = Math.min(plot.water, delta);\n                    plot.plantTimer += extra;\n                    plot.water -= extra;\n                }\n            })\n        }\n    }\n\n    harvest = (index: number) => {\n        if (index >= this.data.plots.length) return;\n        const plant = this.data.plots[index];\n        if (SeedGrowthTimeRequired(plant.seed) <= plant.plantTimer) {\n            this.data.plots.splice(index, 1)\n            this.getFruit(plant.seed.type)\n        }\n        if (this.data.researches.progression === 2) {\n            this.data.researches.progression = 3\n        }\n        this.engine.notify();\n    }\n\n    getFruit(type: SeedType) {\n        let gain = 1;\n        if (this.data.fruits.bunched.greaterThan(0)) {\n            gain = gain * this.seedGainMult\n        }\n        switch (type) {\n            case SeedType.hope:\n                this.hopeFruit.gainResource(gain);\n                break;\n            case SeedType.circle:\n                this.circularFruit.gainResource(gain);\n                break;\n            case SeedType.doom: this.doomedFruits.gainResource(gain); break;\n            case SeedType.bunch: this.bunchedFruit.gainResource(gain); break;\n            case SeedType.triangle: this.triangularFruit.gainResource(gain); break;\n            case SeedType.square:\n                this.squareFruit.gainResource(gain);\n                break;\n\n            default:\n                break;\n        }\n        this.setTempData();\n    }\n\n    getSeed = () => {\n        if (!this.canGetSeed()) return;\n\n        let possibleTypes: SeedType[] = [SeedType.hope];\n        if (this.data.researches.typeBunch) possibleTypes.push(SeedType.bunch);\n        if (this.data.researches.typeCircle) possibleTypes.push(SeedType.circle);\n        if (this.data.researches.typeSquare) possibleTypes.push(SeedType.square);\n        if (this.data.researches.typeTriangle) possibleTypes.push(SeedType.triangle);\n        let rng = getRandomInt(0, possibleTypes.length - 1);\n        console.log(possibleTypes, rng);\n        \n        let chosenType = possibleTypes[rng]\n\n        const seed: GardenSeed = {\n            type: chosenType,\n            level: 1,\n        }\n        this.data.bag.push(seed);\n        this.data.seeds = this.data.seeds.subtract(1);\n        if (this.data.researches.progression === 1) {\n            this.data.researches.progression = 2;\n        }\n\n        this.engine.notify();\n    }\n\n    getSeedType = (typ: SeedType) => {\n        if (!this.canGetSeed()) return;\n        const seed: GardenSeed = {\n            type: typ,\n            level: 1,\n        }\n        this.data.bag.push(seed);\n\n    }\n\n    getPlant = (seed: GardenSeed): GardenPlant => {\n        return {\n            plantTimer: 0,\n            water: 0,\n            seed: seed,\n        }\n    }\n\n    waterPlant = (index: number) => {\n        if (this.data.plots.length <= index) return;\n        else {\n            this.data.plots[index].water = MINUTE_MS * this.waterTimeMulti;\n        }\n        this.engine.notify();\n    }\n\n    hopeFruit: SingleResource = new SingleResource({\n        get: () => this.data.fruits.hope,\n        setDecimal: (dec) => this.data.fruits.hope = dec,\n        name: 'Hope Fruit'\n    })\n\n    res_watering: SingleResearch = new SingleResearch({\n        name: \"Watering\",\n        hidden: () => false,\n        description: \"Watering Plants increases their growth speed\",\n        get: () => this.data.researches.watering,\n        makeTrue: () => { this.data.researches.watering = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(2) }\n        ]\n    })\n\n    res_expansion_one: SingleResearch = new SingleResearch({\n        name: \"Expansion\",\n        hidden: () => this.data.researches.watering === false,\n        description: \"+1 Bag Slot / +1 Plot\",\n        get: () => this.data.researches.expansion > 0,\n        makeTrue: () => {\n            this.data.researches.expansion = 1\n            this.setTempData();\n        },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(3) }\n        ]\n    })\n\n    \n\n    res_seedtype_circle: SingleResearch = new SingleResearch({\n        name: \"Circular Seeds\",\n        hidden: () => this.data.researches.expansion === 0,\n        description: \"You can generate circular seeds now\",\n        get: () => this.data.researches.typeCircle,\n        makeTrue: () => { this.data.researches.typeCircle = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(3) }\n        ]\n    })\n\n    res_seedtype_squre: SingleResearch = new SingleResearch({\n        name: \"Squre Seeds\",\n        hidden: () => this.data.researches.expansion === 0,\n        description: \"You can generate square seeds now\",\n        get: () => this.data.researches.typeSquare,\n        makeTrue: () => { this.data.researches.typeSquare = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(3) }\n        ]\n    })\n\n    res_seedtype_bunch: SingleResearch = new SingleResearch({\n        name: \"Bunched Seeds\",\n        hidden: () => this.data.researches.expansion === 0,\n        description: \"You can generate bunched seeds now\",\n        get: () => this.data.researches.typeBunch,\n        makeTrue: () => { this.data.researches.typeBunch = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(3) }\n        ]\n    })\n\n    res_seedtype_triangle: SingleResearch = new SingleResearch({\n        name: \"Trianglular Seeds\",\n        hidden: () => this.data.researches.expansion === 0,\n        description: \"You can generate triangular seeds now\",\n        get: () => this.data.researches.typeTriangle,\n        makeTrue: () => { this.data.researches.typeTriangle = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(3) }\n        ]\n    })\n\n    circularFruit: SingleResource = new SingleResource({\n        get: () => this.data.fruits.circular,\n        setDecimal: (dec) => {\n            this.data.fruits.circular = dec;\n            this.setGardenSpeedMult();\n        },\n        name: 'Circular Fruit'\n    })\n\n    squareFruit: SingleResource = new SingleResource({\n        get: () => this.data.fruits.square,\n        setDecimal: (dec) => this.data.fruits.square = dec,\n        name: 'Square Fruit'\n    })\n\n    triangularFruit: SingleResource = new SingleResource({\n        get: () => this.data.fruits.triangular,\n        setDecimal: (dec) => this.data.fruits.triangular = dec,\n        name: 'Triangular Fruit'\n    })\n\n    bunchedFruit: SingleResource = new SingleResource({\n        get: () => this.data.fruits.bunched,\n        setDecimal: (dec) => this.data.fruits.bunched = dec,\n        name: 'Bunched Fruit'\n    })\n\n    res_doomfromhope: SingleResearch = new SingleResearch({\n        name: \"Doomed Seeds\",\n        hidden: () => this.data.researches.expansion === 0,\n        description: \"Sometimes you find a doom seed\\nwhile planting another seed\",\n        get: () => this.data.researches.doomedSeeds,\n        makeTrue: () => { this.data.researches.doomedSeeds = true },\n        costs: [\n            { resource: this.hopeFruit, count: new Decimal(2) },\n            { resource: this.engine.doom, count: new Decimal(1e6) }\n        ]\n    })\n\n    doomedFruits: SingleResource = new SingleResource({\n        get: () => this.data.fruits.doom,\n        setDecimal: (dec) => this.data.fruits.doom = dec,\n        name: 'Fruit of Doom'\n    })\n\n    gardenSpeedMult = 1;\n    setGardenSpeedMult = () => {\n\n        const mult = this.data.fruits.circular.times(.1).add(1).toNumber();\n        //console.log('calcing garden speed mult',mult);\n        this.gardenSpeedMult = mult;\n    }\n\n    waterTimeMulti = 1;\n    setWaterTimeMulti = () => {\n        const mult = this.data.fruits.triangular.add(1).toNumber();\n        this.waterTimeMulti = mult;\n    }\n\n    seedGainMult = 1;\n    setSeedGainMulti = () => {\n        const mult = this.data.fruits.bunched.times(.1).add(1).toNumber();\n        this.seedGainMult = mult;\n    }\n\n    doomFruitMult = new Decimal(1);\n    setDoomFruitMult = () => {\n        const mult = this.data.fruits.doom.add(1);\n        this.doomFruitMult = mult;\n    }\n\n    res_expansion_two: SingleResearch = new SingleResearch({\n        name: \"Square Expansion\",\n        hidden: () => this.data.researches.typeSquare === false,\n        description: \"+1 Bag Slot / +1 Plot\",\n        get: () => this.data.researches.expansion > 1,\n        makeTrue: () => {\n            this.data.researches.expansion = 2\n            this.setTempData();\n        },\n        costs: [\n            { resource: this.squareFruit, count: new Decimal(25) },\n            { resource: this.hopeFruit, count: new Decimal(25) },\n        ]\n    })\n\n    resetGarden = () => {\n        this.engine.datamap.garden = GardenData_Init();\n    }\n\n    rebirth: SingleBuilding = new SingleBuilding({\n        building: new SingleResource({\n            name: 'Rebirth',\n            get: () => this.engine.datamap.cell.rebirth,\n            setDecimal: (dec) => {\n                this.engine.datamap.cell.rebirth = dec;\n                this.rebirthReset();\n            },\n        }),\n        costs: [\n            { expo: { initial: 3, coefficient: 5 }, resource: this.doomedFruits },\n        ],\n        description: `More Garden Speed, Resets Garden`,\n        hidden: () => this.engine.datamap.cell.rebirth.lessThan(1) && this.engine.datamap.garden.fruits.doom.eq(0),\n        outcome: () => {\n            return `+1x Garden Speed\\nCurrent: ${this.engine.datamap.cell.rebirth.add(1)}x`\n        },\n    })\n\n    res_bag_expansion: SingleResearch = new SingleResearch({\n        name: \"Bigger Bag\",\n        hidden: () => this.data.researches.expansion < 2,\n        description: \"+1 Bag Slot\",\n        get: () => this.data.researches.bagExpansion > 0,\n        makeTrue: () => {\n            this.data.researches.bagExpansion = 1;\n            this.setTempData();\n        },\n        costs: [\n            { resource: this.squareFruit, count: new Decimal(50) },\n        ]\n    })\n    \n\n    rebirthReset = () => {\n        this.resetGarden();\n    }\n\n}\n\nexport const TimeRequiredForSeed = MINUTE_MS * 60;\n\nexport enum SeedType {\n    hope,\n    circle,\n    square,\n    bunch,\n    triangle,\n    doom\n}\n\nexport interface GardenSeed {\n    type: SeedType;\n    level: number;\n}\n\nexport interface GardenPlant {\n    seed: GardenSeed;\n    plantTimer: number;\n    water: number;\n}\n\nexport interface GardenData {\n    seedTimer: number;\n    seeds: Decimal;\n    bag: GardenSeed[];\n    plots: GardenPlant[];\n    fruits: {\n        hope: Decimal\n        circular: Decimal;\n        triangular: Decimal\n        bunched: Decimal;\n        square: Decimal;\n        doom: Decimal;\n    }\n    researches: {\n        progression: number;\n        expansion: number;\n        bagExpansion: number;\n        watering: boolean;\n        typeCircle: boolean;\n        typeSquare: boolean;\n        typeBunch: boolean;\n        typeTriangle: boolean;\n        doomedSeeds: boolean;\n    }\n    bagSlot1: GardenSeed | null;\n    bagSlot2: GardenSeed | null;\n    bagSlot3: GardenSeed | null;\n    gardenSlot1: GardenPlant | null;\n    gardenSlot2: GardenPlant | null;\n    gardenSlot3: GardenPlant | null;\n    gardenSlot4: GardenPlant | null;\n    gardenSlot5: GardenPlant | null;\n    gardenSlot6: GardenPlant | null;\n    gardenSlot7: GardenPlant | null;\n    gardenSlot8: GardenPlant | null;\n    gardenSlot9: GardenPlant | null;\n}\n\nexport function GardenData_Init(): GardenData {\n    const ZERO = new Decimal(0);\n    return {\n        seedTimer: 0,\n        seeds: ZERO,\n        bag: [],\n        plots: [],\n        bagSlot1: null,\n        bagSlot2: null,\n        bagSlot3: null,\n        gardenSlot1: null,\n        gardenSlot2: null,\n        gardenSlot3: null,\n        gardenSlot4: null,\n        gardenSlot5: null,\n        gardenSlot6: null,\n        gardenSlot7: null,\n        gardenSlot8: null,\n        gardenSlot9: null,\n        fruits: {\n            hope: new Decimal(0),\n            bunched: new Decimal(0),\n            circular: new Decimal(0),\n            square: new Decimal(0),\n            triangular: new Decimal(0),\n            doom: new Decimal(0)\n        },\n        researches: {\n            progression: 0,\n            expansion: 0,\n            bagExpansion: 0,\n            watering: false,\n            typeBunch: false,\n            typeCircle: false,\n            typeSquare: false,\n            typeTriangle: false,\n            doomedSeeds: false,\n        }\n    }\n}\n\nexport function GardenData_SetDecimals(data: Datamap) {\n    data.garden.seeds = new Decimal(data.garden.seeds)\n\n    data.garden.fruits.hope = new Decimal(data.garden.fruits.hope)\n    data.garden.fruits.bunched = new Decimal(data.garden.fruits.bunched)\n    data.garden.fruits.circular = new Decimal(data.garden.fruits.circular)\n    data.garden.fruits.square = new Decimal(data.garden.fruits.square)\n    data.garden.fruits.triangular = new Decimal(data.garden.fruits.triangular)\n    data.garden.fruits.doom = new Decimal(data.garden.fruits.doom)\n\n}\n\n\nexport function SeedGrowthTimeRequired(seed: GardenSeed) {\n    let base = TimeRequiredForSeed;\n    let mult = seed.type + 1;\n    return base * mult;\n}","/home/ktoombs/code/uglylikeme/src/index.tsx",[],"/home/ktoombs/code/uglylikeme/src/UI/DisplayDecimal.tsx",[],"/home/ktoombs/code/uglylikeme/src/UI/comps/BasicCommand.tsx",[],["142","143"],"/home/ktoombs/code/uglylikeme/src/engine/externalfns/ad-notations.esm.js",["144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187"],"/home/ktoombs/code/uglylikeme/src/UI/GardenRow.tsx",[],"/home/ktoombs/code/uglylikeme/src/UI/OptionsRow.tsx",["188","189","190"],"/home/ktoombs/code/uglylikeme/src/engine/DoomResearches.ts",[],"/home/ktoombs/code/uglylikeme/src/engine/externalfns/decimalInterfaces/ExpoCurve.ts",[],{"ruleId":"191","severity":1,"message":"192","line":2,"column":8,"nodeType":"193","messageId":"194","endLine":2,"endColumn":9},{"ruleId":"191","severity":1,"message":"195","line":4,"column":8,"nodeType":"193","messageId":"194","endLine":4,"endColumn":22},{"ruleId":"191","severity":1,"message":"196","line":262,"column":19,"nodeType":"193","messageId":"194","endLine":262,"endColumn":22},{"ruleId":"197","replacedBy":"198"},{"ruleId":"199","replacedBy":"200"},{"ruleId":"201","severity":1,"message":"202","line":21,"column":12,"nodeType":"203","endLine":23,"endColumn":9},{"ruleId":"197","replacedBy":"204"},{"ruleId":"199","replacedBy":"205"},{"ruleId":"191","severity":1,"message":"206","line":1,"column":8,"nodeType":"193","messageId":"194","endLine":1,"endColumn":15},{"ruleId":"191","severity":1,"message":"207","line":22,"column":15,"nodeType":"193","messageId":"194","endLine":22,"endColumn":23},{"ruleId":"208","severity":1,"message":"209","line":27,"column":44,"nodeType":"193","messageId":"210","endLine":27,"endColumn":51},{"ruleId":"208","severity":1,"message":"209","line":28,"column":44,"nodeType":"193","messageId":"210","endLine":28,"endColumn":51},{"ruleId":"211","severity":1,"message":"212","line":94,"column":89,"nodeType":"213","messageId":"214","endLine":94,"endColumn":91},{"ruleId":"197","replacedBy":"215"},{"ruleId":"199","replacedBy":"216"},{"ruleId":"197","replacedBy":"217"},{"ruleId":"199","replacedBy":"218"},{"ruleId":"191","severity":1,"message":"219","line":1,"column":19,"nodeType":"193","messageId":"194","endLine":1,"endColumn":32},{"ruleId":"211","severity":1,"message":"212","line":54,"column":21,"nodeType":"213","messageId":"214","endLine":54,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":55,"column":25,"nodeType":"213","messageId":"214","endLine":55,"endColumn":27},{"ruleId":"211","severity":1,"message":"212","line":76,"column":21,"nodeType":"213","messageId":"214","endLine":76,"endColumn":23},{"ruleId":"211","severity":1,"message":"212","line":77,"column":25,"nodeType":"213","messageId":"214","endLine":77,"endColumn":27},{"ruleId":"191","severity":1,"message":"220","line":1,"column":17,"nodeType":"193","messageId":"194","endLine":1,"endColumn":30},{"ruleId":"191","severity":1,"message":"221","line":2,"column":10,"nodeType":"193","messageId":"194","endLine":2,"endColumn":19},{"ruleId":"208","severity":1,"message":"222","line":54,"column":38,"nodeType":"193","messageId":"210","endLine":54,"endColumn":46},{"ruleId":"208","severity":1,"message":"222","line":117,"column":18,"nodeType":"193","messageId":"210","endLine":117,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":120,"column":18,"nodeType":"193","messageId":"210","endLine":120,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":123,"column":18,"nodeType":"193","messageId":"210","endLine":123,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":124,"column":18,"nodeType":"193","messageId":"210","endLine":124,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":125,"column":18,"nodeType":"193","messageId":"210","endLine":125,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":126,"column":18,"nodeType":"193","messageId":"210","endLine":126,"endColumn":26},{"ruleId":"208","severity":1,"message":"222","line":139,"column":42,"nodeType":"193","messageId":"210","endLine":139,"endColumn":50},{"ruleId":"208","severity":1,"message":"222","line":140,"column":64,"nodeType":"193","messageId":"210","endLine":140,"endColumn":72},{"ruleId":"208","severity":1,"message":"222","line":141,"column":65,"nodeType":"193","messageId":"210","endLine":141,"endColumn":73},{"ruleId":"208","severity":1,"message":"222","line":142,"column":65,"nodeType":"193","messageId":"210","endLine":142,"endColumn":73},{"ruleId":"208","severity":1,"message":"222","line":143,"column":67,"nodeType":"193","messageId":"210","endLine":143,"endColumn":75},{"ruleId":"197","replacedBy":"223"},{"ruleId":"199","replacedBy":"224"},{"ruleId":"225","severity":1,"message":"226","line":135,"column":28,"nodeType":"227","messageId":"228","endLine":135,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":135,"column":61,"nodeType":"227","messageId":"228","endLine":135,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":160,"column":28,"nodeType":"227","messageId":"228","endLine":160,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":160,"column":61,"nodeType":"227","messageId":"228","endLine":160,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":294,"column":28,"nodeType":"227","messageId":"228","endLine":294,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":294,"column":61,"nodeType":"227","messageId":"228","endLine":294,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":347,"column":28,"nodeType":"227","messageId":"228","endLine":347,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":347,"column":61,"nodeType":"227","messageId":"228","endLine":347,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":378,"column":28,"nodeType":"227","messageId":"228","endLine":378,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":378,"column":61,"nodeType":"227","messageId":"228","endLine":378,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":407,"column":28,"nodeType":"227","messageId":"228","endLine":407,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":407,"column":61,"nodeType":"227","messageId":"228","endLine":407,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":439,"column":28,"nodeType":"227","messageId":"228","endLine":439,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":439,"column":61,"nodeType":"227","messageId":"228","endLine":439,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":480,"column":28,"nodeType":"227","messageId":"228","endLine":480,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":480,"column":61,"nodeType":"227","messageId":"228","endLine":480,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":516,"column":28,"nodeType":"227","messageId":"228","endLine":516,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":516,"column":61,"nodeType":"227","messageId":"228","endLine":516,"endColumn":63},{"ruleId":"229","severity":1,"message":"230","line":581,"column":85,"nodeType":"213","messageId":"231","endLine":581,"endColumn":86},{"ruleId":"229","severity":1,"message":"230","line":581,"column":154,"nodeType":"213","messageId":"231","endLine":581,"endColumn":155},{"ruleId":"229","severity":1,"message":"230","line":581,"column":223,"nodeType":"213","messageId":"231","endLine":581,"endColumn":224},{"ruleId":"225","severity":1,"message":"226","line":587,"column":28,"nodeType":"227","messageId":"228","endLine":587,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":587,"column":61,"nodeType":"227","messageId":"228","endLine":587,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":652,"column":28,"nodeType":"227","messageId":"228","endLine":652,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":652,"column":61,"nodeType":"227","messageId":"228","endLine":652,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":708,"column":28,"nodeType":"227","messageId":"228","endLine":708,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":708,"column":61,"nodeType":"227","messageId":"228","endLine":708,"endColumn":63},{"ruleId":"225","severity":1,"message":"232","line":794,"column":69,"nodeType":"227","messageId":"228","endLine":794,"endColumn":71},{"ruleId":"225","severity":1,"message":"232","line":794,"column":84,"nodeType":"227","messageId":"228","endLine":794,"endColumn":86},{"ruleId":"225","severity":1,"message":"226","line":816,"column":28,"nodeType":"227","messageId":"228","endLine":816,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":816,"column":61,"nodeType":"227","messageId":"228","endLine":816,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":1022,"column":28,"nodeType":"227","messageId":"228","endLine":1022,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1022,"column":61,"nodeType":"227","messageId":"228","endLine":1022,"endColumn":63},{"ruleId":"233","severity":1,"message":"234","line":1111,"column":10,"nodeType":"193","messageId":"235","endLine":1111,"endColumn":16},{"ruleId":"225","severity":1,"message":"226","line":1125,"column":28,"nodeType":"227","messageId":"228","endLine":1125,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1125,"column":61,"nodeType":"227","messageId":"228","endLine":1125,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":1289,"column":28,"nodeType":"227","messageId":"228","endLine":1289,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1289,"column":61,"nodeType":"227","messageId":"228","endLine":1289,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":1326,"column":28,"nodeType":"227","messageId":"228","endLine":1326,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1326,"column":61,"nodeType":"227","messageId":"228","endLine":1326,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":1374,"column":28,"nodeType":"227","messageId":"228","endLine":1374,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1374,"column":61,"nodeType":"227","messageId":"228","endLine":1374,"endColumn":63},{"ruleId":"225","severity":1,"message":"226","line":1432,"column":28,"nodeType":"227","messageId":"228","endLine":1432,"endColumn":30},{"ruleId":"225","severity":1,"message":"226","line":1432,"column":61,"nodeType":"227","messageId":"228","endLine":1432,"endColumn":63},{"ruleId":"191","severity":1,"message":"195","line":3,"column":8,"nodeType":"193","messageId":"194","endLine":3,"endColumn":22},{"ruleId":"236","severity":1,"message":"237","line":22,"column":8,"nodeType":"238","endLine":22,"endColumn":23},{"ruleId":"236","severity":1,"message":"237","line":30,"column":8,"nodeType":"238","endLine":30,"endColumn":23},"@typescript-eslint/no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","'DisplayDecimal' is defined but never used.","'now' is assigned a value but never used.","no-native-reassign",["239"],"no-negated-in-lhs",["240"],"react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","JSXText",["239"],["240"],"'Decimal' is defined but never used.","'research' is assigned a value but never used.","@typescript-eslint/no-use-before-define","'NavKeys' was used before it was defined.","noUseBeforeDefine","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["239"],["240"],["239"],["240"],"'DecimalSource' is defined but never used.","'CSSProperties' is defined but never used.","'timeStamp' is defined but never used.","'SeedType' was used before it was defined.",["239"],["240"],"no-mixed-operators","Unexpected mix of '&&' and '||'.","LogicalExpression","unexpectedMixedOperator","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","Unexpected mix of '||' and '&&'.","no-redeclare","'number' is already defined.","redeclared","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]